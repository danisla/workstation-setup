# Ansible playbook for crostini workstation
- hosts: localhost
  vars:
    projects: "{{ ansible_env.HOME }}/projects"
    debian_release: stretch
    golang_version: 1.11.1
    dep_version: v0.5.0
    kubectl_version: v1.11.3
    skaffold_version: v0.15.1
    kustomize_version: 1.0.8
    helm_version: 2.11.0
    terraform_version: 0.11.10
  tasks:
  - name: update apt cache and dist
    tags: ["dist"]
    become: yes
    apt:
      update_cache: yes
      upgrade: dist

  - name: install packages
    tags: ["packages"]
    become: yes
    apt:
      state: latest
      name: "{{ packages }}"
    vars:
      packages:
      - gnupg
      - pinentry-gtk2
      - tmux
      - htop
      - autossh
      - x11-apps
      - apt-transport-https
      - ca-certificates
      - curl
      - jq
      - gnupg2
      - software-properties-common
      - file
      - dnsutils
      - wget
      - python3
      - asciinema
      
  - name: gpg-agent pinentry program
    tags: ["gnupg"]
    lineinfile:
      dest: "{{ ansible_env.HOME }}/.gnupg/gpg-agent.conf"
      line: "pinentry-program /usr/bin/pinentry-gtk-2"
      regex: "^pinentry-program.*"
  
  - name: gpg tty
    tags: ["gnupg"]
    lineinfile:
      dest: "{{ ansible_env.HOME }}/.bashrc"
      line: "export GPG_TTY=$(tty)"
      
  ### Begin ansible update ###
  - name: ansible apt key
    tags: ["ansible"]
    become: yes
    apt_key:
      keyserver: keyserver.ubuntu.com
      id: 93C4A3FD7BB9C367
      state: present
  
  - name: ansible apt repo
    tags: ["ansible"]
    become: yes
    apt_repository:
      repo: deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main
      state: present
  
  - name: install updated ansible
    tags: ["ansible"]
    become: yes
    apt:
      update_cache: yes
      state: latest
      name: ansible

  ### End ansible update ###

  ### Begin projects dir ###
  - name: create projects dir
    tags: ["projects"]
    file:
      path: "{{ projects }}"
      state: directory
  ### End projects dir ###

  ### Begin vscode ###
  - name: add vscode repo apt key
    tags: ["code"]
    become: yes
    apt_key:
      url: https://packages.microsoft.com/keys/microsoft.asc
      state: present

  - name: add vscode deb repo
    tags: ["code"]
    become: yes
    apt_repository:
      repo: deb https://packages.microsoft.com/repos/vscode stable main
      state: present

  - name: install vscode
    tags: ["code"]
    become: yes
    apt:
      update_cache: yes
      state: latest
      name: code
  ### End vscode ###

  ### Begin golang ###
  - name: check go install
    tags: ["go"]
    stat:
      path: /usr/local/go/bin/go
    register: go_st

  - name: check go version
    tags: ["go"]
    shell: go version
    register: go_ver
    changed_when: no
    when: go_st.stat.exists

  - name: install golang
    tags: ["go"]
    become: yes
    unarchive:
      src: https://dl.google.com/go/go{{ golang_version }}.linux-amd64.tar.gz
      dest: /usr/local/
      remote_src: yes
    when: not go_st.stat.exists or golang_version not in go_ver.stdout

  - name: add go to path
    tags: ["go"]
    lineinfile:
      dest: "{{ ansible_env.HOME }}/.bashrc"
      line: "PATH=${PATH}:/usr/local/go/bin"

  - name: create GOPATH
    tags: ["go"]
    file:
      path: "{{ ansible_env.HOME }}/go"
      state: directory

  - name: add GOPATH to bashrc
    tags: ["go"]
    lineinfile:
      dest: "{{ ansible_env.HOME }}/.bashrc"
      line: "GOPATH={{ ansible_env.HOME}}/go"

  - name: install dep
    tags: ["go","dep"]
    become: yes
    get_url:
      url: https://github.com/golang/dep/releases/download/{{ dep_version }}/dep-linux-amd64
      dest: /usr/local/go/bin/dep
      mode: 0755
  ### End golang ###

  ### Begin gcloud-sdk ###
  - name: add gcloud sdk repo apt key
    tags: ["gcloud"]
    become: yes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg 
      state: present

  - name: add gcloud sdk deb repo
    tags: ["gcloud"]
    become: yes
    apt_repository:
      repo: deb http://packages.cloud.google.com/apt cloud-sdk-{{ debian_release }} main
      state: present

  - name: install gcloud sdk
    tags: ["gcloud"]
    become: yes
    apt:
      update_cache: yes
      state: latest
      name: google-cloud-sdk
  
  - name: clone gcloudfunc repo 
    tags: ["gcloud", "gcloudfunc"]
    git:
      repo: https://github.com/danisla/gcloudfunc.git
      dest: "{{ projects }}/gcloudfunc"

  - name: install gcloudfunc
    tags: ["gcloud", "gcloudfunc"]
    lineinfile:
      dest: "{{ ansible_env.HOME }}/.bashrc"
      line: "source {{ projects }}/gcloudfunc/gcloudfunc.bash"
    
  ### End gcloud-sdk ###

  ### Begin docker ###
  - name: add docker sdk repo apt key
    tags: ["docker"]
    become: yes
    apt_key:
      url: https://download.docker.com/linux/debian/gpg
      state: present

  - name: add docker deb repo
    tags: ["docker"]
    become: yes
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/debian {{ debian_release }} stable
      state: present

  - name: install docker-ce
    tags: ["docker"]
    become: yes
    apt:
      update_cache: yes
      state: latest
      name: docker-ce
  
  - name: add user to docker group
    tags: ["docker", "user"]
    become: yes
    user:
      name: "{{ ansible_env.USER }}"
      append: yes
      groups: docker
  
  - name: clone dockerfiles repo 
    tags: ["docker", "dockerfunc"]
    git:
      repo: https://github.com/danisla/dockerfiles.git
      dest: "{{ projects }}/dockerfiles"
  
  - name: install dockerfunc
    tags: ["docker", "dockerfunc"]
    lineinfile:
      dest: "{{ ansible_env.HOME }}/.bashrc"
      line: "source {{ projects }}/dockerfiles/.dockerfunc.bash"
  ### End docker ###

  ### Begin kube ###
  - name: install kubectl
    tags: ["kube"]
    become: yes
    get_url:
      url: https://storage.googleapis.com/kubernetes-release/release/{{ kubectl_version }}/bin/linux/amd64/kubectl
      dest: /usr/local/bin/kubectl
      mode: 0755

  - name: install kustomize
    tags: ["kube"]
    become: yes
    get_url:
      url: https://github.com/kubernetes-sigs/kustomize/releases/download/v1.0.8/kustomize_{{ kustomize_version }}_linux_amd64
      dest: /usr/local/bin/kustomize
      mode: 0755
  
  - name: install skaffold
    tags: ["kube"]
    become: yes
    get_url:
      url: https://github.com/GoogleContainerTools/skaffold/releases/download/{{ skaffold_version }}/skaffold-linux-amd64
      dest: /usr/local/bin/skaffold
      mode: 0755
  
  - name: check helm install
    tags: ["kube", "helm"]
    stat:
      path: /usr/local/bin/linux-amd64/helm
    register: helm_st

  - name: check helm version
    tags: ["kube", "helm"]
    shell: helm version -c
    register: helm_ver
    changed_when: no
    when: helm_st.stat.exists

  - name: install helm
    tags: ["kube", "helm"]
    become: yes
    unarchive:
      src: https://storage.googleapis.com/kubernetes-helm/helm-v{{ helm_version }}-linux-amd64.tar.gz
      dest: /usr/local/bin/
      remote_src: yes
    when: not helm_st.stat.exists or helm_version not in helm_ver.stdout

  - name: link helm
    tags: ["kube", "helm"]
    become: yes
    file:
      src: /usr/local/bin/linux-amd64/helm
      dest: /usr/local/bin/helm
      state: link

  ### End kubectl ###

  ### Begin terraform
  - name: check terraform install
    tags: ["terraform"]
    stat:
      path: /usr/local/bin/terraform
    register: terraform_st
  
  - name: check terraform version
    tags: ["terraform"]
    shell: terraform version | head -1
    register: terraform_ver
    changed_when: no
    when: terraform_st.stat.exists

  - name: install terraform
    tags: ["terraform"]
    become: yes
    unarchive:
      src: https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip
      dest: /usr/local/bin/
      remote_src: yes
    when: not terraform_st.stat.exists or terraform_version not in terraform_ver.stdout
  ### End terraform
